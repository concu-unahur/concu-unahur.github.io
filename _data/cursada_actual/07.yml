descripcion: |

  Vimos [monitores](https://en.wikipedia.org/wiki/Monitor_(synchronization)) en Python. La idea básica de un monitor es que funciona como un `Lock` pero que además puede esperar a una determinada condición.

  ```python
  monitor = threading.Condition()

  # Consumir un ítem
  with monitor: # hace el acquire (y al final el release)
    while not hay_un_item():
      monitor.wait() # espera hasta que se dé la señal
    consumir_un_item()

  # Producir un ítem
  with monitor:
    hacer_un_item()
    monitor.notify() # notifica la señal


  # el with es una forma fácil de hacer acquire y release.
  # Hubiera sido lo mismo hacer así:
  monitor.acquire()
  try:
    hacer_un_item()
    monitor.notify()
  finally:
    monitor.releas()
  ```

  El Manejo básico de monitores es el siguiente

  ```python
  monitor = threading.Condition() #crea el monitor. Se le puede pasar como parámetro un Lock en particular
  monitor.acquire() # mismo que para semáforos
  monitor.release() # mismo que para semáforos
  monitor.wait() # esperar hasta recibir señal
  monitor.notify() # dar señal a algún thread que está esperando
  monitor.notifyAll() # dar señal a todos los threads que están esperando
  ```

  Se puede leer la documentación desde acá [python-threading-condition-objects](https://docs.python.org/3/library/threading.html#condition-objects).

ejercicios:
  - name: Monitores
    repo: concu-unahur/python-monitores
    classroom: https://classroom.github.com/a/kGWgJtjU

